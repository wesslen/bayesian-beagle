
---
title: "Hybrid Automated Program Repair by Combining Large Language Models and Program Analysis"
id: "2406.00992v2"
description: "GiantRepair, an APR approach, improves bug repair by refining LLM-generated patches, outperforming existing methods."
author: Fengjie Li, Jiajun Jiang, Jiajun Sun, Hongyu Zhang
date: "2024-06-04"
image: "https://browse.arxiv.org/html/2406.00992v2/x1.png"
categories: ['robustness']
format:
  html:
    code-overflow: wrap
---

![](https://browse.arxiv.org/html/2406.00992v2/x1.png)

# Summary

The paper introduces GiantRepair, an innovative automated program repair (APR) approach that leverages the capabilities of large language models (LLMs) and context-aware patch refinement. The approach addresses the limitations of existing APR methods, which often utilize patches generated by LLMs without further optimization, resulting in reduced effectiveness due to the lack of program-specific knowledge. GiantRepair first constructs patch skeletons from LLM-generated patches to confine the patch space, and then generates high-quality patches tailored to specific programs through context-aware patch generation by instantiating the skeletons.

## Major Findings

1. GiantRepair effectively repairs more bugs (an average of 27.78% on Defects4J v1.2 and 23.40% on Defects4J v2.0) than using LLM-generated patches directly.
2. GiantRepair outperforms state-of-the-art APR methods by repairing at least 42 and 7 more bugs under perfect and automated fault localization scenarios, respectively.
3. The experimental results demonstrate the effectiveness and generality of GiantRepair, providing new insights for future research in the field of APR.

## Analysis and Critique

While GiantRepair shows promising results, there are still some potential limitations and areas for improvement:

1. The evaluations of GiantRepair have been conducted under the assumption of perfect fault localization, which may not accurately reflect its real-world effectiveness.
2. The approach relies on the quality of the patches generated by LLMs, which may not always be accurate or complete.
3. The scalability of GiantRepair to larger and more complex software systems remains to be investigated.
4. The approach does not explicitly address the issue of overfitting to the training data, which could potentially limit its generalizability to new and unseen bugs.

Overall, GiantRepair represents a significant step forward in the field of automated program repair, leveraging the power of large language models to improve the effectiveness and efficiency of the repair process. However, further research is needed to address the aforementioned limitations and fully realize the potential of this approach.

## Appendix

|          |          |
|----------|----------|
| Model     | accounts/fireworks/models/mixtral-8x22b-instruct       |
| Date Generated     | 2024-06-05       |
| Abstract | [https://arxiv.org/abs/2406.00992v2](https://arxiv.org/abs/2406.00992v2)        |
| HTML     | [https://browse.arxiv.org/html/2406.00992v2](https://browse.arxiv.org/html/2406.00992v2)       |
| Truncated       | False       |
| Word Count       | 10076       |