{
  "hash": "366527fd4bf52939e7364a4691e1506c",
  "result": {
    "markdown": "---\ntitle: \"Inter-annotator Agreement (IAA) in Prodigy\"\nsubtitle: \"Calculating IAA in binary text classification with two annotators.\"\nauthor: \"Ryan Wesslen\"\ndate: \"2022-09-25\"\ncategories: [prodigy, textcat, inter-rater relilability, multi-user sessions]\nformat:\n  html:\n    code-overflow: wrap\n---\n\nTODO: add preview image\n\n## Multi-user sessions in Prodigy \n\nSince v1.7.0 was released, Prodigy has offered [multi-user sessions](https://prodi.gy/docs/api-web-app#multi-user-sessions) within the same Prodigy instance. This functionality enables dividing up Prodigy annotations across different annotators when saving annotations to the same dataset and performing an identical task.\n\nTODO: 2-3 sentences on example, link to past TECH issues\n\n```python\n# news_headlines.jsonl\n{'text': 'Uber’s Lesson: Silicon Valley’s Start-Up Machine Needs Fixing',\n 'meta': {'source': 'The New York Times'}\n}\n```\n\nTODO: add section on data input/formatting\n\n```{.bash filename=\"Terminal\"}\npython -m prodigy textcat.manual news_textcat news_headlines.jsonl --label TECHNOLOGY\n\nUsing 1 label(s): TECHNOLOGY\n\n✨  Starting the web server at http://localhost:8080 ...\nOpen the app in your browser and start annotating!\n```\n\n<br>\n\n:::{.column-body-outset}\n![](img/IAA-Jordan.png) \n\nTo create a custom named session, add `?session=xxx` to the annotation app URL. For example, annotator Jordan may access a running Prodigy project via `http://localhost:8080/?session=jordan`. The example shows running the [`textcat.manual`](https://prodi.gy/docs/recipes/#textcat-manual) Prodigy recipe but this works for any Prodigy recipe. This will enable use to track each annotator so we can calculate inter-annotator agreement.\n:::\n\nInternally, this will request and send back annotations with a session identifier consisting of the current dataset name and the session ID – for example, `textcat-jordan`. Every time annotator Jordan labels examples for this dataset, their annotations will be associated with this session identifier.\n\nLet's say that in addition to Jordan, we also asked a second annotator, Alex, do both label 20 records in the dataset to determine whether the news headlines are technology-related or not. We provide both their respective URL and have them complete their annotations.\n\nTo pull their annotations, we'll use Prodigy's `get_dataset_examples()` function:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom prodigy.components.db import connect\nimport pprint\n\ndb = connect()\nexamples = db.get_dataset_examples(\"news_textcat\")\n\npprint.pprint(examples[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'_annotator_id': 'news_textcat-jordan',\n '_input_hash': 1886699658,\n '_session_id': 'news_textcat-jordan',\n '_task_hash': -257308161,\n '_timestamp': 1659908691,\n '_view_id': 'classification',\n 'answer': 'accept',\n 'label': 'TECHNOLOGY',\n 'meta': {'source': 'The New York Times'},\n 'text': 'Uber’s Lesson: Silicon Valley’s Start-Up Machine Needs Fixing'}\n```\n:::\n:::\n\n\n::: callout-hint\nTODO: deprecation of `get_dataset`\n:::\n\nSince we're interested in text classification annotations, we'll focus on the `\"answer\"` values comparing those that are `\"reject\"` versus `\"accept\"`.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\n# keep only the \"accept\" and \"reject\" answers\nanno = [eg for eg in examples if eg[\"answer\"] in [\"accept\", \"reject\"]]\n\n# convert to a dataframe\ndf = pd.DataFrame(anno)\n\ndf_annotations = df.pivot(\n    index=['_input_hash'], \n    columns='_session_id', \n    values='answer'\n)\n\ndf_annotations.head(n=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>_session_id</th>\n      <th>news_textcat-alex</th>\n      <th>news_textcat-jordan</th>\n    </tr>\n    <tr>\n      <th>_input_hash</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>-584314991</th>\n      <td>reject</td>\n      <td>reject</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Cohen's Kappa\n\nTODO: 2-3 sentences on Cohen's Kappa.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.metrics import cohen_kappa_score\n\nkappa = cohen_kappa_score(\n    df_annotations['news_textcat-alex'], \n    df_annotations['news_textcat-jordan'], \n    labels=None, \n    weights=None\n)\n\nprint(kappa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.736842105263158\n```\n:::\n:::\n\n\nSo we've found a Cohen's Kappa of `0.737`, which is fairly high. \n\nTODO: Discussion on interpreting Cohen's Kappa\n\n::: callout-important\nIn practice, you may have many more complexities like saving different annotations to different datasets, multi-class classification, [span-based tasks like named entity recognition (NER) or spancat](https://support.prodi.gy/t/proper-way-to-calculate-inter-annotator-agreement-for-spans-ner/5760), or handling for more than two annotators. This use case is the simplest case; however, I hope to create more advanced use cases in the future.\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}