
---
title: "Achieving Fairness in DareFightingICE Agents Evaluation Through a Delay Mechanism"
id: "2312.16010v1"
description: "Delay mechanism mitigates gRPC latency impact on agents in DareFightingICE, balancing performance between Java and Python."
author: Chollakorn Nimpattanavong, Thai Van Nguyen, Ibrahim Khan, Ruck Thawonmas, Worawat Choensawat, Kingkarn Sookhanaphibarn
date: "2023-12-26"
image: "https://browse.arxiv.org/html/2312.16010v1/extracted/5317251/images/sandbox.png"
categories: ['architectures']
format:
  html:
    code-overflow: wrap
---

![](https://browse.arxiv.org/html/2312.16010v1/extracted/5317251/images/sandbox.png)

### Key Findings
- The gRPC latency differences between Java and Python significantly impact real-time decision-making in DareFightingICE, favoring Java-based agents without a delay mechanism.
- A delay mechanism proposed in this study mitigates the gRPC latency impact, leading to fair performance comparison between Java-based and Python-based agents.
- The study highlights the importance of considering gRPC latency in agent development and evaluation, with potential implications for other gRPC-based applications.

### Methodology
- **Objectives and Implementation**
  - Implemented agents in Java and Python to measure the overhead on round-trip latency, focusing on data transmission optimization.
- **Experimental Setup**
  - Employed a computer simulating the official competition PC to ensure accurate and reliable results for agent performance evaluation.
- **Evaluation of Latency**
  - Measured average latency of Java-based and Python-based agents, identifying an efficient delay mechanism for Java-based agents.

### Evaluation
- **Experimental Approach**
  - Investigated the impact of gRPC latency and effectiveness of the delay mechanism on agent performance using the winner of the previous competition as a test-bed.
- **Evaluation Method**
  - Introduced a method considering remaining Health Points and elapsed time as crucial factors for assessing agent performance, enabling precise evaluation.
- **Results**
  - The delay mechanism effectively reduced the performance gap between Java-based and Python-based agents, leading to fair performance comparison.

### Critique
While the study provides valuable insights into mitigating gRPC latency differences, it is limited to a specific type of agent and environment. Moreover, it focuses solely on the impact of gRPC latency differences between Java and Python, overlooking other factors that could affect agent performance. Future research should explore the effects of gRPC latency on various agents in diverse settings and consider additional variables such as operating system features.

The paper does not discuss potential drawbacks or limitations of the delay mechanism, such as its impact on overall system performance or potential trade-offs in real-world applications. Investigating these aspects would provide a more comprehensive understanding of the proposed approach.

Overall, the study offers important implications for the development and evaluation of agents in gRPC-based applications but could benefit from broader exploration and consideration of potential drawbacks of the proposed delay mechanism.

## Appendix

|          |          |
|----------|----------|
| Model     | gpt-3.5-turbo-1106       |
| Date Generated     | 2024-01-10       |
| Abstract | [http://arxiv.org/abs/2312.16010v1](http://arxiv.org/abs/2312.16010v1)        |
| HTML     | [https://browse.arxiv.org/html/2312.16010v1](https://browse.arxiv.org/html/2312.16010v1)       |
| Truncated       | False       |
| Word Count       | 4286       |