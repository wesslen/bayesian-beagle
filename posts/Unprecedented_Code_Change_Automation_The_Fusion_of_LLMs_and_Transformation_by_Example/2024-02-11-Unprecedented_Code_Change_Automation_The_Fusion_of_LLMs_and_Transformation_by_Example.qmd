
---
title: "Unprecedented Code Change Automation: The Fusion of LLMs and Transformation by Example"
id: "2402.07138v1"
description: "Automating code change patterns with Large Language Models improves effectiveness and acceptance rate."
author: Malinda Dilhara, Abhiram Bellur, Timofey Bryksin, Danny Dig
date: "2024-02-11"
image: "../../img/2402.07138v1/image_1.png"
categories: ['programming']
format:
  html:
    code-overflow: wrap
---

![](../../img/2402.07138v1/image_1.png)

### Summary:
- Software developers often repeat the same code changes within a project or across different projects, known as "code change patterns" (CPATs).
- Current Transformation by Example (TBE) techniques can automate CPATs but are limited by input examples' quality and quantity.
- Large Language Models (LLMs) offer a potential solution by generating semantically equivalent, yet previously unseen variants of the original CPAT.
- PyCraft successfully generated variations of input examples and comprehensive test cases, resulting in an increase in target codes compared to a previous state-of-the-art tool.
- The developers accepted and merged 83% of the CPAT instances submitted through 44 pull requests, confirming the usefulness of these changes.

### Major Findings:
1. PyCraft successfully automates the generation of code variations and test cases, resulting in an increase in target codes compared to previous tools.
2. Large Language Models (LLMs) such as PALM, GPT-3, and GPT-4 consistently produce numerous raw variations and test cases, with GPT-4 excelling in generating a greater number of distinct correct variants.
3. Optimal temperature values and prompt iterations significantly influence the generation of non-useful and useful variants, with PyCraft generating an average of 58 applicable variations per CPAT.

### Analysis and Critique:
- The paper provides valuable insights into the limitations of current TBE techniques and the potential of LLMs in automating code changes, with implications for the efficiency and effectiveness of software development processes.
- The detailed explanation of PyCraft's technique and the empirical study of LLMs' effectiveness contribute to understanding the capabilities and limitations of LLMs in generating program transformations and test cases, informing the development of PyCraft.
- The comparison with PyEvolve demonstrates the advanced capabilities of PyCraft in automating a broader spectrum of code variations, indicating its potential usefulness for real-world developers.
- The comprehensive list of references provides a valuable starting point for further investigation and exploration of topics related to software engineering and code refactoring.

## Appendix

|          |          |
|----------|----------|
| Model     | gpt-3.5-turbo-1106       |
| Date Generated     | 2024-02-26       |
| Abstract | [https://arxiv.org/abs/2402.07138v1](https://arxiv.org/abs/2402.07138v1)        |
| HTML     | [https://browse.arxiv.org/html/2402.07138v1](https://browse.arxiv.org/html/2402.07138v1)       |
| Truncated       | True       |
| Word Count       | 26649       |