
---
title: "Comparison of Static Application Security Testing Tools and Large Language Models for Repo-level Vulnerability Detection"
id: "2407.16235v1"
description: "SAST tools have low detection rates but fewer false positives, while LLMs detect more vulnerabilities but have high false positives. Combining both can improve results."
author: Xin Zhou, Duc-Manh Tran, Thanh Le-Cong, Ting Zhang, Ivana Clairine Irsan, Joshua Sumarlin, Bach Le, David Lo
date: "2024-07-23"
image: "https://browse.arxiv.org/html/2407.16235v1/x1.png"
categories: ['prompt-engineering', 'programming']
format:
  html:
    code-overflow: wrap
---

![](https://browse.arxiv.org/html/2407.16235v1/x1.png)

### Summary:

This paper presents a comparative study between Static Application Security Testing (SAST) tools and Large Language Models (LLMs) for detecting software vulnerabilities in repositories. The study aims to determine the effectiveness of both approaches, understand their pros and cons, and explore the potential combination of these two families of approaches. The experimental results showed that SAST tools obtain low vulnerability detection rates with relatively low false positives, while LLMs can detect up to 90% to 100% of vulnerabilities but suffer from high false positives. By ensembling the SAST tools and LLMs, the drawbacks of both SAST tools and LLMs can be mitigated to some extent.

### Major Findings:

1. SAST tools obtained low vulnerability detection ratios (up to 44.4%) and many failed to detect any vulnerabilities.
2. LLMs achieved high vulnerability detection rates (up to 90% to 100%) but they were accompanied by high false positive rates.
3. By combining multiple SAST tools, a substantial increase (i.e., 25.2%–100.0%) in vulnerability detection rates was observed. Combining diverse LLMs led to a substantial reduction (i.e., 40.9%–74.6%) in false positive rates.
4. The best approach differs across programming languages if considering both detection rates and false positive rates. For Java, the combined LLMs provide the most effective solution, while for C and Python, the combined SAST tools are the best.

### Analysis and Critique:

The study provides a comprehensive comparison of SAST tools and LLMs for vulnerability detection, highlighting the strengths and weaknesses of both approaches. However, the following points should be considered:

1. The study focuses on a limited number of SAST tools and LLMs, and the results may not generalize to other tools and models.
2. The study does not consider the computational resources required for each approach, which could be a significant factor in practical applications.
3. The study does not explore the potential of combining SAST tools and LLMs in a more sophisticated manner, which could lead to further improvements in vulnerability detection.
4. The study does not discuss the potential impact

## Appendix

|          |          |
|----------|----------|
| Model     | accounts/fireworks/models/mixtral-8x22b-instruct       |
| Date Generated     | 2024-07-30       |
| Abstract | [https://arxiv.org/abs/2407.16235v1](https://arxiv.org/abs/2407.16235v1)        |
| HTML     | [https://browse.arxiv.org/html/2407.16235v1](https://browse.arxiv.org/html/2407.16235v1)       |
| Truncated       | False       |
| Word Count       | 12620       |