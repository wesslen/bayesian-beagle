
---
title: "Compositional API Recommendation for Library-Oriented Code Generation"
id: "2402.19431v1"
description: "CAPIR improves coarse-grained library API recommendation: 43.2% recall@5, 28.0% pass@100."
author: Zexiong Ma, Shengnan An, Bing Xie, Zeqi Lin
date: "2024-02-29"
image: "https://browse.arxiv.org/html/2402.19431v1/x1.png"
categories: ['production', 'architectures', 'programming', 'recommender']
format:
  html:
    code-overflow: wrap
---

![](https://browse.arxiv.org/html/2402.19431v1/x1.png)

### Summary:

- Large language models (LLMs) have achieved exceptional performance in code generation, but the performance remains unsatisfactory in generating library-oriented code, especially for libraries not present in the training data of LLMs.
- A new approach, Compositional API Recommendation (CAPIR), is proposed to address the challenge of granularity inconsistency in developmental requirements.
- CAPIR employs an LLM-based Decomposer, an embedding-based Retriever, and an LLM-based Reranker to break down coarse-grained tasks, identify relevant APIs, and filter out redundant APIs.
- Two benchmarks, RAPID and LOCG, are presented to facilitate the evaluation of API recommendation methods on coarse-grained requirements.
- Experimental results show that CAPIR significantly improves recall and precision in API recommendation tasks and leads to better pass@ performance in library-oriented code generation tasks.

### Major Findings:

1. CAPIR demonstrates a substantial improvement in recall and precision in API recommendation tasks compared to existing baselines.
2. CAPIR significantly enhances pass@ performance in library-oriented code generation tasks, indicating its effectiveness in generating correct code.
3. The use of two benchmarks, RAPID and LOCG, facilitates a comprehensive evaluation of API recommendation methods on coarse-grained requirements.

### Analysis and Critique:

- The study focuses on improving library-oriented code generation, but the evaluation is limited to Python. Further investigation is required to determine if CAPIR can be applied to other programming languages.
- The study assumes that the quality of task descriptions is clear, which might not always be the case in real-world scenarios. More research is needed to address the challenge of unclear or ambiguous task descriptions.
- The study does not discuss the computational cost of using large language models in the CAPIR approach, which could be a limiting factor for some applications.
- The study could benefit from exploring the integration of domain-specific knowledge to further improve the performance of library-oriented code generation.

## Appendix

|          |          |
|----------|----------|
| Model     | accounts/fireworks/models/mixtral-8x7b-instruct       |
| Date Generated     | 2024-06-05       |
| Abstract | [https://arxiv.org/abs/2402.19431v1](https://arxiv.org/abs/2402.19431v1)        |
| HTML     | [https://browse.arxiv.org/html/2402.19431v1](https://browse.arxiv.org/html/2402.19431v1)       |
| Truncated       | False       |
| Word Count       | 11838       |