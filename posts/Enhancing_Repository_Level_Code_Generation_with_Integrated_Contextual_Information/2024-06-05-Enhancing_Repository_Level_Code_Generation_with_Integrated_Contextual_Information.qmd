
---
title: "Enhancing Repository-Level Code Generation with Integrated Contextual Information"
id: "2406.03283v1"
description: "CatCoder improves LLM code generation for repositories, outperforming RepoCoder by up to 17.35% in pass@k score, and shows consistent improvements across various LLMs."
author: Zhiyuan Pan, Xing Hu, Xin Xia, Xiaohu Yang
date: "2024-06-05"
image: "https://browse.arxiv.org/html/2406.03283v1/x2.png"
categories: ['programming']
format:
  html:
    code-overflow: wrap
---

![](https://browse.arxiv.org/html/2406.03283v1/x2.png)

### Summary:

The paper presents CatCoder, a novel code generation framework designed for statically typed programming languages. CatCoder enhances repository-level code generation by integrating relevant code and type context. It leverages static analyzers to extract type dependencies and merges this information with retrieved code to create comprehensive prompts for large language models (LLMs). The effectiveness of CatCoder is evaluated using 199 Java tasks and 90 Rust tasks, and the results show that CatCoder outperforms the RepoCoder baseline by up to 17.35%, in terms of pass@ score. The generalizability of CatCoder is assessed using various LLMs, including both code-specialized models and general-purpose models, and the findings indicate consistent performance improvements across all models.

### Major Findings:

1. CatCoder, a novel code generation framework, improves repository-level code generation by integrating relevant code and type context for statically typed programming languages.
2. The evaluation of CatCoder using 199 Java tasks and 90 Rust tasks demonstrates its superior performance compared to the RepoCoder baseline, with up to 17.35% improvement in pass@ score.
3. CatCoder's generalizability is confirmed by its consistent performance improvements across various LLMs, including both code-specialized models and general-purpose models.

### Analysis and Critique:

1. The paper effectively addresses the challenge of utilizing information spread across multiple files within a repository for code generation tasks.
2. The use of static analyzers to extract type dependencies and merge this information with retrieved code is a novel approach that enhances the performance of LLMs in code generation tasks.
3. The evaluation of CatCoder using a diverse set of tasks and LLMs provides strong evidence for its effectiveness and generalizability.
4. However, the paper does not discuss any potential limitations or shortcomings of the proposed approach, such as its applicability to other programming languages or the computational resources required for its implementation.
5. Additionally, the paper does not provide a detailed comparison of CatCoder with other existing code generation frameworks, which could further strengthen its claims of superior performance.

Overall, the paper presents a well-structured and co

## Appendix

|          |          |
|----------|----------|
| Model     | accounts/fireworks/models/mixtral-8x22b-instruct       |
| Date Generated     | 2024-06-23       |
| Abstract | [https://arxiv.org/abs/2406.03283v1](https://arxiv.org/abs/2406.03283v1)        |
| HTML     | [https://browse.arxiv.org/html/2406.03283v1](https://browse.arxiv.org/html/2406.03283v1)       |
| Truncated       | False       |
| Word Count       | 9447       |