
---
title: "DIDUP: Dynamic Iterative Development for UI Prototyping"
id: "2407.08474v1"
description: "TL;DR: DIDUP improves LLM-generated code-prototyping with adaptive planning, code injection, and lightweight state management for better UI prototyping."
author: Jenny Ma, Karthik Sreedhar, Vivian Liu, Sitong Wang, Pedro Alejandro Perez, Lydia B. Chilton
date: "2024-07-11"
image: "https://browse.arxiv.org/html/2407.08474v1/extracted/5723595/output.png"
categories: ['hci', 'programming', 'robustness', 'prompt-engineering']
format:
  html:
    code-overflow: wrap
---

![](https://browse.arxiv.org/html/2407.08474v1/extracted/5723595/output.png)

### Summary:

- The paper discusses the use of large language models (LLMs) in code-based UI prototyping, highlighting the limitations of existing systems like GPT Pilot, which follow a linear waterfall model.
- The authors propose DIDUP, a system for code-based UI prototyping that follows an iterative spiral model, incorporating three novel mechanisms: adaptive planning, code injection, and lightweight state management.
- Adaptive planning allows for continual updates in designs and plans based on feedback and implementation, while code injection enables safe code modifications by injecting the minimal amount of code necessary to a target location.
- Lightweight state management provides a simplified version of source control, allowing users to quickly revert to different working states and rapidly prototype explorations.
- The paper presents a walkthrough of the DIDUP system, demonstrating its ability to assist in creating code-based UI prototypes and handle changes effectively.
- The evaluation of DIDUP against GPT Pilot showed that DIDUP produced more complete and stylistic UIs, and users were able to backtrack and prevent errors more effectively.

### Major Findings:

1. Existing LLM-powered code generation systems, like GPT Pilot, follow a linear waterfall model, which is inflexible towards changes and not suitable for applications with evolving requirements.
2. DIDUP, a system for code-based UI prototyping, follows an iterative spiral model, incorporating three novel mechanisms: adaptive planning, code injection, and lightweight state management.
3. Adaptive planning allows for continual updates in designs and plans based on feedback and implementation, while code injection enables safe code modifications by injecting the minimal amount of code necessary to a target location.
4. Lightweight state management provides a simplified version of source control, allowing users to quickly revert to different working states and rapidly prototype explorations.
5. The evaluation of DIDUP against GPT Pilot showed that DIDUP produced more complete and stylistic UIs, and users were able to backtrack and prevent errors more effectively.

### Analysis and Critique:

- The paper effectively highlights the limitations of existing LLM-powered code generation systems and proposes a novel solution, DIDUP

## Appendix

|          |          |
|----------|----------|
| Model     | accounts/fireworks/models/mixtral-8x22b-instruct       |
| Date Generated     | 2024-07-16       |
| Abstract | [https://arxiv.org/abs/2407.08474v1](https://arxiv.org/abs/2407.08474v1)        |
| HTML     | [https://browse.arxiv.org/html/2407.08474v1](https://browse.arxiv.org/html/2407.08474v1)       |
| Truncated       | False       |
| Word Count       | 3335       |